generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  password              String
  name                  String
  phone                 String?
  avatar                String?
  type                  String
  active                Boolean?             @default(true)
  activated             Boolean?             @default(false)
  activationToken       String?              @db.VarChar(300)
  passwordRecoveryToken String?              @db.VarChar(300)
  locked                Boolean?             @default(false)
  birthday              DateTime?
  preferredLanguage     String?              @default("en")
  userRoles             UserRole[]
  topScorers            TopScorer[]
  userTeams             UserTeam[]
  matchBracketScorers   MatchBracketScorer[]
}

model UserRole {
  user   User @relation(fields: [userId], references: [id])
  userId Int
  role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Role {
  id        Int        @id @default(autoincrement())
  role      String
  userRoles UserRole[]
}

model Team {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  logo                 String?
  active               Boolean?              @default(true)
  tournamentTeams      TournamentTeam[]
  topScorers           TopScorer[]
  userTeams            UserTeam[]
  matchBracketTeams    MatchBracketTeam[]
  tournamentTeamScores TournamentTeamScore[]
  teamImages           TeamImage[]
}

model TeamImage {
  id     Int     @id @default(autoincrement())
  url    String?
  Team   Team?   @relation(fields: [teamId], references: [id])
  teamId Int?
}

model Tournament {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  logo                 String?
  active               Boolean?              @default(false)
  tournamentTeams      TournamentTeam[]
  tournamentTeamScores TournamentTeamScore[]
  tournamentMatchDates TournamentMatchDate[]
  tournamentTopScorers TournamentTopScorer[]
}

model TournamentTeam {
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       Int

  @@id([tournamentId, teamId])
}

model UserTeam {
  user           User         @relation(fields: [userId], references: [id])
  userId         Int
  team           Team         @relation(fields: [teamId], references: [id])
  teamId         Int
  userTeamRole   UserTeamRole @relation(fields: [userTeamRoleId], references: [id])
  userTeamRoleId Int

  @@id([userId, teamId, userTeamRoleId])
}

model UserTeamRole {
  id        Int        @id @default(autoincrement())
  role      String
  userTeams UserTeam[]
}

model TournamentMatchDate {
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  matchDate    MatchDate  @relation(fields: [matchDateId], references: [id])
  matchDateId  Int

  @@id([tournamentId, matchDateId])
}

model TournamentTeamScore {
  tournament    Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId  Int
  team          Team       @relation(fields: [teamId], references: [id])
  teamId        Int
  matchesPlayed Int        @default(0)
  matchesWon    Int        @default(0)
  matchesTied   Int        @default(0)
  matchesLost   Int        @default(0)
  goalsAhead    Int        @default(0)
  goalsAgainst  Int        @default(0)
  points        Int        @default(0)

  @@id([tournamentId, teamId])
}

model MatchDate {
  id                   Int                   @id @default(autoincrement())
  title                String?
  date                 String?
  matchBrackets        MatchDateBracket[]
  tournamentMatchDates TournamentMatchDate[]
}

model MatchDateBracket {
  id                             Int                             @id @default(autoincrement())
  time                           String?
  matchAlreadyHappened           Boolean?                        @default(false)
  matchDate                      MatchDate?                      @relation(fields: [matchDateId], references: [id])
  matchDateId                    Int?
  matchDateBracketToBracketTeams MatchDateBracketToBracketTeam[]
}

model MatchDateBracketToBracketTeam {
  matchDateBracket   MatchDateBracket @relation(fields: [matchDateBracketId], references: [id])
  matchDateBracketId Int
  matchBracketTeam   MatchBracketTeam @relation(fields: [matchBracketTeamId], references: [id])
  matchBracketTeamId Int

  @@id([matchDateBracketId, matchBracketTeamId])
}

model MatchBracketTeam {
  id                             Int                             @id @default(autoincrement())
  goals                          Int?                            @default(0)
  team                           Team                            @relation(fields: [teamId], references: [id])
  teamId                         Int
  matchBracketTeamScorers        MatchBracketTeamScorer[]
  matchDateBracketToBracketTeams MatchDateBracketToBracketTeam[]
}

model MatchBracketTeamScorer {
  matchBracketTeam     MatchBracketTeam   @relation(fields: [matchBracketTeamId], references: [id])
  matchBracketTeamId   Int
  matchBracketScorer   MatchBracketScorer @relation(fields: [matchBracketScorerId], references: [id])
  matchBracketScorerId Int

  @@id([matchBracketTeamId, matchBracketScorerId])
}

model TournamentTopScorer {
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  topScorer    TopScorer  @relation(fields: [topScorerId], references: [id])
  topScorerId  Int

  @@id([tournamentId, topScorerId])
}

model TopScorer {
  id                   Int                   @id @default(autoincrement())
  user                 User?                 @relation(fields: [userId], references: [id])
  userId               Int?
  team                 Team?                 @relation(fields: [teamId], references: [id])
  teamId               Int?
  goals                Int?                  @default(0)
  tournamentTopScorers TournamentTopScorer[]
}

model MatchBracketScorer {
  id                      Int                      @id @default(autoincrement())
  goals                   Int?                     @default(0)
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  Int
  matchBracketTeamScorers MatchBracketTeamScorer[]
}

model Rule {
  id            Int      @id @default(autoincrement())
  articleNumber Int
  name          String
  clauses       Clause[]
}

model Clause {
  id             Int     @id @default(autoincrement())
  title          String
  additionalInfo String?
  rule           Rule    @relation(fields: [ruleId], references: [id])
  ruleId         Int
}

model ContactInfo {
  id             Int                  @id @default(autoincrement())
  companyName    String
  companyPhrase  String
  companyLogo    String
  copyright      String               @default("")
  companyLogoUrl String?
  phones         ContactPhone[]
  emails         ContactEmail[]
  socialMedias   ContactSocialMedia[]
}

model ContactQuestion {
  id        Int      @id @default(autoincrement())
  name      String
  lastName  String
  email     String
  phone     String?
  subject   String
  message   String
  sent      Boolean  @default(false)
  sendDate  String?
  responded Boolean? @default(false)
}

model ContactSocialMedia {
  id            Int          @id @default(autoincrement())
  logo          String
  name          String
  url           String
  contactInfo   ContactInfo? @relation(fields: [contactInfoId], references: [id])
  contactInfoId Int?
}

model ContactPhone {
  id            Int         @id @default(autoincrement())
  number        String
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id])
  contactInfoId Int
}

model ContactEmail {
  id            Int         @id @default(autoincrement())
  email         String
  contactInfo   ContactInfo @relation(fields: [contactInfoId], references: [id])
  contactInfoId Int
}

model Announcement {
  id                 Int              @id @default(autoincrement())
  message            String
  announcementType   AnnouncementType @relation(fields: [announcementTypeId], references: [id])
  announcementTypeId Int
}

model AnnouncementType {
  id           Int            @id @default(autoincrement())
  type         String
  announcement Announcement[]
}

model Notification {
  id                  Int               @id @default(autoincrement())
  message             String
  notificationType    NotificationType  @relation(fields: [notificationTypeId], references: [id])
  notificationRoute   NotificationRoute @relation(fields: [notificationRouteId], references: [id])
  notificationTypeId  Int
  notificationRouteId Int
}

model NotificationType {
  id           Int            @id @default(autoincrement())
  type         String
  notification Notification[]
}

model NotificationRoute {
  id           Int            @id @default(autoincrement())
  route        String
  notification Notification[]
}
